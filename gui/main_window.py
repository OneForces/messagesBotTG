# gui/main_window.py

from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget,
    QTabWidget, QVBoxLayout, QLabel, QPushButton, QFileDialog, QTextEdit,
    QSpinBox, QHBoxLayout, QListWidget
)
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from utils.templates import parse_template
from PyQt5.QtWidgets import QMenu
from PyQt5.QtCore import Qt, QPoint
from PyQt5.QtWidgets import QInputDialog
from telethon.errors import SessionPasswordNeededError
from PyQt5.QtWidgets import QComboBox
import base64
from telethon.sessions import MemorySession
import json
import sys
import os
import asyncio
from core.account_manager import check_account_status
from telethon import TelegramClient, errors
import random
import time
import threading
from datetime import datetime
import csv
import threading
import asyncio


def append_report(account, recipient, status, message):
    os.makedirs("logs", exist_ok=True)
    path = "logs/report.csv"
    write_header = not os.path.exists(path)

    with open(path, "a", encoding="utf-8", newline="") as f:
        writer = csv.writer(f)
        if write_header:
            writer.writerow(["account", "recipient", "status", "message", "time"])
        writer.writerow([
            os.path.basename(account),
            f"@{recipient}",
            "‚úÖ" if status else "‚ùå",
            message,
            datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        ])


API_ID = 12345678  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π
API_HASH = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π

def write_log(file, text):
    with open(file, "a", encoding="utf-8") as f:
        f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ‚Äî {text}\n")

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Telegram Sender")
        self.setGeometry(200, 200, 900, 600)

        self.tabs = QTabWidget()
        self.setCentralWidget(self.tabs)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.account_list_widget = QListWidget()
        self.recipients_list_widget = QListWidget()

        self.proxies = []
        self.recipients = []
        self.accounts = []
        self.media_path = None
        self.stop_flag = False

        # –ù–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: —Ç–∏–ø –º–µ–¥–∏–∞
        self.media_type = None  # –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ init_message_tab()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫
        self.init_accounts_tab()
        self.init_proxies_tab()
        self.init_recipients_tab()
        self.init_message_tab()
        self.init_settings_tab()
        self.init_send_tab()
        self.init_log_tab()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.load_logs()
        self.load_config()

        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        self.destroyed.connect(self.save_config)

    def init_log_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        self.send_log = QTextEdit()
        self.send_log.setReadOnly(True)
        layout.addWidget(QLabel("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"))
        layout.addWidget(self.send_log)

        self.errors_log = QTextEdit()
        self.errors_log.setReadOnly(True)
        layout.addWidget(QLabel("‚ùå –û—à–∏–±–∫–∏"))
        layout.addWidget(self.errors_log)

        self.accounts_log = QTextEdit()
        self.accounts_log.setReadOnly(True)
        layout.addWidget(QLabel("üë§ –ê–∫–∫–∞—É–Ω—Ç—ã"))
        layout.addWidget(self.accounts_log)

        refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏")
        refresh_btn.clicked.connect(self.load_logs)
        layout.addWidget(refresh_btn)

        export_btn = QPushButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç (report.csv)")
        export_btn.clicked.connect(self.export_report)
        layout.addWidget(export_btn)

        tab.setLayout(layout)
        self.tabs.addTab(tab, "–õ–æ–≥")


    def load_logs(self):
        def read_log(file_path):
            if os.path.exists(file_path):
                with open(file_path, "r", encoding="utf-8") as f:
                    return f.read()
            return "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."

        self.send_log.setPlainText(read_log("logs/send.log"))
        self.errors_log.setPlainText(read_log("logs/errors.log"))
        self.accounts_log.setPlainText(read_log("logs/accounts.log"))

    def init_accounts_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        layout.addWidget(QLabel("–ò–º–ø–æ—Ä—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (.session)"))

        btns = QHBoxLayout()
        load_btn = QPushButton("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å")
        load_btn.clicked.connect(self.load_accounts)
        refresh_btn = QPushButton("üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
        refresh_btn.clicked.connect(self.recheck_accounts)
        btns.addWidget(load_btn)
        btns.addWidget(refresh_btn)
        layout.addLayout(btns)

        layout.addWidget(QLabel("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º:"))

        # üëâ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –ø–æ –ü–ö–ú
        self.account_list_widget.setContextMenuPolicy(Qt.CustomContextMenu)
        self.account_list_widget.customContextMenuRequested.connect(self.show_account_context_menu)

        layout.addWidget(self.account_list_widget)

        # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–∞–Ω–∞
        move_btn = QPushButton("‚¨Ü –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–∞–Ω–∞")
        move_btn.clicked.connect(self.move_from_temp_ban)
        layout.addWidget(move_btn)

        tab.setLayout(layout)
        self.tabs.addTab(tab, "–ê–∫–∫–∞—É–Ω—Ç—ã")

    def move_from_temp_ban(self):
        selected_items = self.account_list_widget.selectedItems()
        if not selected_items:
            return
        for item in selected_items:
            session_name = item.text().split(" ‚Äî ")[0]
            if session_name in self.accounts:
                acc = self.accounts[session_name]
                if acc.get("status") == "temp_ban":
                    acc["status"] = "active"
                    item.setText(f"{session_name} ‚Äî ‚úÖ –∞–∫—Ç–∏–≤–Ω—ã–π (—Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥)")


    def show_account_context_menu(self, position: QPoint):
        item = self.account_list_widget.itemAt(position)
        if item is None:
            return

        menu = QMenu()
        mark_active = menu.addAction("‚úÖ –ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π")
        action = menu.exec_(self.account_list_widget.mapToGlobal(position))

        if action == mark_active:
            text = item.text()
            if "—Ç–µ–Ω–µ–≤–æ–π –±–∞–Ω" in text or "‚ö†Ô∏è" in text:
                updated = text.replace("‚ö†Ô∏è —Ç–µ–Ω–µ–≤–æ–π –±–∞–Ω", "‚úÖ –∞–∫—Ç–∏–≤–µ–Ω")
                updated = updated.replace("‚ö†Ô∏è", "‚úÖ")
                item.setText(updated)
                write_log("logs/accounts.log", f"{updated} ‚Äî –≤—Ä—É—á–Ω—É—é –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π")


    def init_proxies_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        layout.addWidget(QLabel("–ò–º–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏ (ip:port:user:pass)"))
        load_btn = QPushButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–∫—Å–∏")
        load_btn.clicked.connect(self.load_proxies)
        layout.addWidget(load_btn)

        layout.addWidget(QLabel("–ü—Ä–æ–∫—Å–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –∑–¥–µ—Å—å..."))
        tab.setLayout(layout)
        self.tabs.addTab(tab, "–ü—Ä–æ–∫—Å–∏")

    def init_recipients_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        layout.addWidget(QLabel("–ò–º–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (@username)"))
        load_btn = QPushButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
        load_btn.clicked.connect(self.load_recipients)
        layout.addWidget(load_btn)

        layout.addWidget(QLabel("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:"))
        layout.addWidget(self.recipients_list_widget)

        tab.setLayout(layout)
        self.tabs.addTab(tab, "–ü–æ–ª—É—á–∞—Ç–µ–ª–∏")

    def init_message_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        layout.addWidget(QLabel("–í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è:"))
        self.message_edit = QTextEdit()
        layout.addWidget(self.message_edit)

        layout.addWidget(QLabel("–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):"))
        media_btn = QPushButton("–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª")
        media_btn.clicked.connect(self.choose_media)
        layout.addWidget(media_btn)

        self.media_label = QLabel("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: (–ø—É—Ç—å –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å)")
        layout.addWidget(self.media_label)

        layout.addWidget(QLabel("–¢–∏–ø –º–µ–¥–∏–∞:"))
        self.media_type = QComboBox()
        self.media_type.addItems([
            "–§–æ—Ç–æ/–≤–∏–¥–µ–æ", 
            "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", 
            "–ö—Ä—É–∂–æ–∫ (VideoNote)"
        ])
        layout.addWidget(self.media_type)

        tab.setLayout(layout)
        self.tabs.addTab(tab, "–°–æ–æ–±—â–µ–Ω–∏–µ")


    def init_settings_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        layout.addWidget(QLabel("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–µ—Ä–∂–µ–∫ –∏ –ª–∏–º–∏—Ç–æ–≤:"))

        h1 = QHBoxLayout()
        h1.addWidget(QLabel("–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (—Å–µ–∫):"))
        self.min_delay = QSpinBox()
        self.min_delay.setMinimum(1)
        self.min_delay.setMaximum(60)
        self.min_delay.setValue(17)
        self.max_delay = QSpinBox()
        self.max_delay.setMinimum(1)
        self.max_delay.setMaximum(60)
        self.max_delay.setValue(24)
        h1.addWidget(self.min_delay)
        h1.addWidget(QLabel("–¥–æ"))
        h1.addWidget(self.max_delay)
        layout.addLayout(h1)

        h2 = QHBoxLayout()
        h2.addWidget(QLabel("–ú–∞–∫—Å. —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç:"))
        self.msg_limit_min = QSpinBox()
        self.msg_limit_min.setValue(1)
        self.msg_limit_max = QSpinBox()
        self.msg_limit_max.setValue(5)
        h2.addWidget(self.msg_limit_min)
        h2.addWidget(QLabel("–¥–æ"))
        h2.addWidget(self.msg_limit_max)
        layout.addLayout(h2)

        h3 = QHBoxLayout()
        h3.addWidget(QLabel("–ü–æ—Ç–æ–∫–æ–≤:"))
        self.thread_count = QSpinBox()
        self.thread_count.setValue(5)
        h3.addWidget(self.thread_count)
        layout.addLayout(h3)

        # üëâ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        save_btn.clicked.connect(self.save_config)
        layout.addWidget(save_btn)

        tab.setLayout(layout)
        self.tabs.addTab(tab, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")


    def init_send_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        start_btn = QPushButton("‚ñ∂ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
        start_btn.clicked.connect(self.start_sending)
        stop_btn = QPushButton("‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        stop_btn.clicked.connect(self.stop_sending)

        layout.addWidget(start_btn)
        layout.addWidget(stop_btn)
        layout.addWidget(QLabel("–õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å..."))

        tab.setLayout(layout)
        self.tabs.addTab(tab, "–†–∞—Å—Å—ã–ª–∫–∞")

    # gui/main_window.py


    def load_accounts(self):
        session_folder = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ (.session –∏–ª–∏ .json)", "./")
        if not session_folder:
            return

        self.account_list_widget.clear()
        self.accounts.clear()

        def load_thread():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)

            # === .session ===
            session_files = [f for f in os.listdir(session_folder) if f.endswith(".session")]
            for idx, file in enumerate(session_files):
                full_path = os.path.join(session_folder, file)
                proxy = self.proxies[idx] if idx < len(self.proxies) else None
                try:
                    status = loop.run_until_complete(check_account_status(full_path, proxy=proxy))
                    account_name = os.path.basename(full_path)
                    display_text = f"{account_name}: {status}"
                    self.account_list_widget.addItem(display_text)
                    self.accounts.append({
                        "type": "session",
                        "path": full_path
                    })
                    write_log("logs/accounts.log", display_text)
                except Exception as e:
                    error_text = f"{file}: ‚ùå –û—à–∏–±–∫–∞: {str(e)}"
                    self.account_list_widget.addItem(error_text)
                    write_log("logs/errors.log", error_text)

            # === .json ===
            json_files = [f for f in os.listdir(session_folder) if f.endswith(".json")]
            for file in json_files:
                try:
                    with open(os.path.join(session_folder, file), "r", encoding="utf-8") as f:
                        data = json.load(f)

                    session = MemorySession()
                    session.set_dc(data["dc_id"], "149.154.167.50", 443)
                    session.auth_key = base64.b64decode(data["auth_key"])
                    session._dc_id = data["dc_id"]

                    client = TelegramClient(session, data["api_id"], data["api_hash"])
                    loop.run_until_complete(client.connect())

                    if not loop.run_until_complete(client.is_user_authorized()):
                        raise Exception("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")

                    account_name = file.replace(".json", "")
                    display_text = f"{account_name} (json): ‚úÖ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
                    self.account_list_widget.addItem(display_text)
                    self.accounts.append({
                        "type": "json",
                        "session": session,
                        "api_id": data["api_id"],
                        "api_hash": data["api_hash"],
                        "filename": file
                    })
                    write_log("logs/accounts.log", display_text)
                    loop.run_until_complete(client.disconnect())

                except Exception as e:
                    error_text = f"{file}: ‚ùå –û—à–∏–±–∫–∞ JSON: {str(e)}"
                    self.account_list_widget.addItem(error_text)
                    write_log("logs/errors.log", error_text)

        threading.Thread(target=load_thread).start()




    def load_proxies(self):
        path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–æ–∫—Å–∏", "", "Text Files (*.txt)")
        if not path:
            return

        with open(path, "r", encoding="utf-8") as f:
            lines = f.read().splitlines()
            self.proxies = []

            for line in lines:
                parts = line.strip().split(":")
                if len(parts) >= 2:
                    ip, port = parts[0], int(parts[1])
                    user = parts[2] if len(parts) > 2 else None
                    pwd = parts[3] if len(parts) > 3 else None
                    self.proxies.append((ip, port, user, pwd))

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–∫—Å–∏: {len(self.proxies)}")

    def load_recipients(self):
        path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏", "", "Text Files (*.txt)")
        if not path:
            return

        with open(path, "r", encoding="utf-8") as f:
            self.recipients = [line.strip().lstrip('@') for line in f if line.strip()]

        self.recipients_list_widget.clear()
        if not self.recipients:
            self.recipients_list_widget.addItem("‚ùå –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
            return

        if self.account_list_widget.count() == 0:
            self.recipients_list_widget.addItem("‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
            return

        session_file = self.account_list_widget.item(0).text().split(":")[0]
        session_path = os.path.join("sessions", session_file)

        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(self.check_recipient_access(session_path, self.recipients))

    async def check_recipient_access(self, session_path, usernames):
        try:
            client = TelegramClient(session_path.replace(".session", ""), API_ID, API_HASH)
            await client.start()

            for username in usernames:
                try:
                    user = await client.get_entity(username)
                    await client.send_message(user.id, "test")
                    self.recipients_list_widget.addItem(f"‚úÖ @{username} ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ")
                except Exception as e:
                    self.recipients_list_widget.addItem(f"‚ùå @{username} ‚Äî {str(e)}")

            await client.disconnect()

        except Exception as e:
            self.recipients_list_widget.addItem(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")

    def choose_media(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª", "", "All Files (*)")
        if file_path:
            self.media_path = file_path
            self.media_label.setText(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")

    def stop_sending(self):
        self.stop_flag = True

    def start_sending(self):
        self.stop_flag = False
        thread = threading.Thread(target=self.run_sending)
        thread.start()

    def run_sending(self):
        message = self.message_edit.toPlainText()
        min_delay = self.min_delay.value()
        max_delay = self.max_delay.value()
        limit_min = self.msg_limit_min.value()
        limit_max = self.msg_limit_max.value()

        for acc in self.accounts:
            if self.stop_flag:
                break

            try:
                if acc["type"] == "session":
                    client = TelegramClient(acc["path"].replace(".session", ""), API_ID, API_HASH)
                    session_name = os.path.basename(acc["path"])
                else:  # JSON
                    client = TelegramClient(
                        acc["session"],
                        acc["api_id"],
                        acc["api_hash"]
                    )
                    session_name = acc["filename"]

                client.connect()

                if not client.is_user_authorized():
                    try:
                        client.start()
                    except SessionPasswordNeededError:
                        pwd, ok = QInputDialog.getText(
                            self,
                            "2FA –ó–∞—â–∏—Ç–∞",
                            f"–í–≤–µ–¥–∏—Ç–µ 2FA-–ø–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞:\n{session_name}"
                        )
                        if not ok or not pwd:
                            raise Exception("2FA-–ø–∞—Ä–æ–ª—å –Ω–µ –≤–≤–µ–¥—ë–Ω.")
                        client.sign_in(password=pwd)

                send_limit = random.randint(limit_min, limit_max)
                targets = random.sample(self.recipients, min(send_limit, len(self.recipients)))

                for username in targets:
                    if self.stop_flag:
                        break
                    try:
                        user = client.get_entity(username)

                        if self.media_path:
                            media_type = self.media_type.currentText() if self.media_type else "–§–æ—Ç–æ/–≤–∏–¥–µ–æ"

                            if "–ì–æ–ª–æ—Å" in media_type:
                                client.send_file(user, self.media_path, voice_note=True)
                            elif "–ö—Ä—É–∂–æ–∫" in media_type:
                                client.send_file(user, self.media_path, video_note=True)
                            else:
                                client.send_file(user, self.media_path, caption=message)
                        else:
                            client.send_message(user, message)

                        write_log("logs/send.log", f"{session_name} ‚Üí @{username}")
                        append_report(session_name, username, True, "OK")
                        time.sleep(random.uniform(min_delay, max_delay))
                    except Exception as e:
                        write_log("logs/errors.log", f"{session_name} ‚Üí @{username}: {str(e)}")
                        append_report(session_name, username, False, str(e))

                client.disconnect()

            except Exception as e:
                write_log("logs/errors.log", f"–û—à–∏–±–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {session_name}: {str(e)}")





    def recheck_accounts(self):
        if not self.accounts:
            self.account_list_widget.addItem("‚ö†Ô∏è –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            return

        self.account_list_widget.clear()

        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        for idx, path in enumerate(self.accounts):
            proxy = self.proxies[idx] if idx < len(self.proxies) else None
            try:
                status = loop.run_until_complete(check_account_status(path, proxy=proxy))
                account_name = os.path.basename(path)
                display_text = f"{account_name}: {status}"
                self.account_list_widget.addItem(display_text)
                write_log("logs/accounts.log", display_text)
            except Exception as e:
                error_text = f"{os.path.basename(path)}: ‚ùå –û—à–∏–±–∫–∞: {str(e)}"
                self.account_list_widget.addItem(error_text)
                write_log("logs/errors.log", error_text)


    def export_report(self):
        source_path = "logs/report.csv"
        if not os.path.exists(source_path):
            print("‚ùå –§–∞–π–ª –æ—Ç—á—ë—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        target_path, _ = QFileDialog.getSaveFileName(
            self,
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç –∫–∞–∫",
            "report.csv",
            "CSV Files (*.csv)"
        )
        if target_path:
            try:
                with open(source_path, "rb") as src, open(target_path, "wb") as dst:
                    dst.write(src.read())
                print(f"‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {target_path}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")


    def load_config(self):
        if not os.path.exists("config.json"):
            return

        try:
            with open("config.json", "r", encoding="utf-8") as f:
                config = json.load(f)

            self.min_delay.setValue(config.get("min_delay", 1))
            self.max_delay.setValue(config.get("max_delay", 5))
            self.msg_limit_min.setValue(config.get("msg_limit_min", 1))
            self.msg_limit_max.setValue(config.get("msg_limit_max", 5))
            self.thread_count.setValue(config.get("thread_count", 1))
            self.message_edit.setPlainText(config.get("message_text", ""))
            self.media_path = config.get("media_path", None)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ config.json: {e}")


    def save_config(self):
        config = {
            "min_delay": self.min_delay.value(),
            "max_delay": self.max_delay.value(),
            "msg_limit_min": self.msg_limit_min.value(),
            "msg_limit_max": self.msg_limit_max.value(),
            "thread_count": self.thread_count.value(),
            "message_text": self.message_edit.toPlainText(),
            "media_path": self.media_path
        }

        try:
            with open("config.json", "w", encoding="utf-8") as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ config.json: {e}")


    def closeEvent(self, event):
        self.save_config()
        event.accept()

def launch_gui():
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
